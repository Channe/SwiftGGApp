// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `Avatar`.
    static let avatar = ImageResource(bundle: _R.hostingBundle, name: "Avatar")
    /// Image `btn_back`.
    static let btn_back = ImageResource(bundle: _R.hostingBundle, name: "btn_back")
    /// Image `btn_go`.
    static let btn_go = ImageResource(bundle: _R.hostingBundle, name: "btn_go")
    /// Image `btn_list`.
    static let btn_list = ImageResource(bundle: _R.hostingBundle, name: "btn_list")
    /// Image `btn_search`.
    static let btn_search = ImageResource(bundle: _R.hostingBundle, name: "btn_search")
    /// Image `btn_settings`.
    static let btn_settings = ImageResource(bundle: _R.hostingBundle, name: "btn_settings")
    /// Image `icon_articles`.
    static let icon_articles = ImageResource(bundle: _R.hostingBundle, name: "icon_articles")
    /// Image `icon_github`.
    static let icon_github = ImageResource(bundle: _R.hostingBundle, name: "icon_github")
    /// Image `icon_home`.
    static let icon_home = ImageResource(bundle: _R.hostingBundle, name: "icon_home")
    /// Image `icon_logo`.
    static let icon_logo = ImageResource(bundle: _R.hostingBundle, name: "icon_logo")
    /// Image `icon_user`.
    static let icon_user = ImageResource(bundle: _R.hostingBundle, name: "icon_user")
    /// Image `icon_weibo`.
    static let icon_weibo = ImageResource(bundle: _R.hostingBundle, name: "icon_weibo")
    /// Image `icon_weichat`.
    static let icon_weichat = ImageResource(bundle: _R.hostingBundle, name: "icon_weichat")
    /// Image `img_category`.
    static let img_category = ImageResource(bundle: _R.hostingBundle, name: "img_category")
    /// Image `shadow`.
    static let shadow = ImageResource(bundle: _R.hostingBundle, name: "shadow")
    
    /// `UIImage(named: "Avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.avatar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_back", bundle: ..., traitCollection: ...)`
    static func btn_back(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_back, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_go", bundle: ..., traitCollection: ...)`
    static func btn_go(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_go, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_list", bundle: ..., traitCollection: ...)`
    static func btn_list(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_list, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_search", bundle: ..., traitCollection: ...)`
    static func btn_search(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_search, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_settings", bundle: ..., traitCollection: ...)`
    static func btn_settings(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_settings, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_articles", bundle: ..., traitCollection: ...)`
    static func icon_articles(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_articles, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_github", bundle: ..., traitCollection: ...)`
    static func icon_github(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_github, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_home", bundle: ..., traitCollection: ...)`
    static func icon_home(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_home, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo", bundle: ..., traitCollection: ...)`
    static func icon_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_user, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_weibo", bundle: ..., traitCollection: ...)`
    static func icon_weibo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_weibo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_weichat", bundle: ..., traitCollection: ...)`
    static func icon_weichat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_weichat, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_category", bundle: ..., traitCollection: ...)`
    static func img_category(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_category, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shadow, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 13 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticleCollectionViewCell`.
    static let articleCollectionViewCell: ReuseIdentifier<ArticleCollectionViewCell> = ReuseIdentifier(identifier: "ArticleCollectionViewCell")
    /// Reuse identifier `ArticleFooterCollectionViewCell`.
    static let articleFooterCollectionViewCell: ReuseIdentifier<ArticleLoadingCollectionViewCell> = ReuseIdentifier(identifier: "ArticleFooterCollectionViewCell")
    /// Reuse identifier `ArticleLoadMoreTableViewCell`.
    static let articleLoadMoreTableViewCell: ReuseIdentifier<ArticleLoadMoreTableViewCell> = ReuseIdentifier(identifier: "ArticleLoadMoreTableViewCell")
    /// Reuse identifier `ArticleLoadingCollectionViewCell`.
    static let articleLoadingCollectionViewCell: ReuseIdentifier<ArticleLoadingCollectionViewCell> = ReuseIdentifier(identifier: "ArticleLoadingCollectionViewCell")
    /// Reuse identifier `ArticleTableViewCell`.
    static let articleTableViewCell: ReuseIdentifier<ArticleTableViewCell> = ReuseIdentifier(identifier: "ArticleTableViewCell")
    /// Reuse identifier `biu`.
    static let biu: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "biu")
    /// Reuse identifier `biubiu`.
    static let biubiu: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "biubiu")
    /// Reuse identifier `CategoryCollectionViewCell`.
    static let categoryCollectionViewCell: ReuseIdentifier<CategoryCollectionViewCell> = ReuseIdentifier(identifier: "CategoryCollectionViewCell")
    /// Reuse identifier `HomeCollectionViewCell`.
    static let homeCollectionViewCell: ReuseIdentifier<HomeCollectionViewCell> = ReuseIdentifier(identifier: "HomeCollectionViewCell")
    /// Reuse identifier `HomeLoadMoreCollectionViewCell`.
    static let homeLoadMoreCollectionViewCell: ReuseIdentifier<HomeLoadMoreCollectionViewCell> = ReuseIdentifier(identifier: "HomeLoadMoreCollectionViewCell")
    /// Reuse identifier `SearchTableViewCell`.
    static let searchTableViewCell: ReuseIdentifier<SearchTableViewCell> = ReuseIdentifier(identifier: "SearchTableViewCell")
    /// Reuse identifier `SectionFooter`.
    static let sectionFooter: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "SectionFooter")
    /// Reuse identifier `SectionHeader`.
    static let sectionHeader: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "SectionHeader")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `CategoryViewController`, and contains static references to 1 segues.
    struct categoryViewController {
      /// Segue identifier `ShowArticle`.
      static let showArticle: StoryboardSegueIdentifier<UIStoryboardSegue, CategoryViewController, ArticleViewController> = StoryboardSegueIdentifier(identifier: "ShowArticle")
      
      /// Optionally returns a typed version of segue `ShowArticle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showArticle(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CategoryViewController, ArticleViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.categoryViewController.showArticle, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `CategorysViewController`, and contains static references to 1 segues.
    struct categorysViewController {
      /// Segue identifier `ShowCategory`.
      static let showCategory: StoryboardSegueIdentifier<UIStoryboardSegue, CategorysViewController, CategoryViewController> = StoryboardSegueIdentifier(identifier: "ShowCategory")
      
      /// Optionally returns a typed version of segue `ShowCategory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCategory(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CategorysViewController, CategoryViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.categorysViewController.showCategory, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 2 segues.
    struct homeViewController {
      /// Segue identifier `ShowArticle`.
      static let showArticle: StoryboardSegueIdentifier<UIStoryboardSegue, HomeViewController, ArticleViewController> = StoryboardSegueIdentifier(identifier: "ShowArticle")
      /// Segue identifier `ShowSearch`.
      static let showSearch: StoryboardSegueIdentifier<UIStoryboardSegue, HomeViewController, SearchViewController> = StoryboardSegueIdentifier(identifier: "ShowSearch")
      
      /// Optionally returns a typed version of segue `ShowArticle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showArticle(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, HomeViewController, ArticleViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showArticle, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowSearch`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSearch(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, HomeViewController, SearchViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showSearch, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ProfileViewController`, and contains static references to 1 segues.
    struct profileViewController {
      /// Segue identifier `ShowSetting`.
      static let showSetting: StoryboardSegueIdentifier<UIStoryboardSegue, ProfileViewController, SettingViewController> = StoryboardSegueIdentifier(identifier: "ShowSetting")
      
      /// Optionally returns a typed version of segue `ShowSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSetting(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ProfileViewController, SettingViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.showSetting, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SearchViewController`, and contains static references to 1 segues.
    struct searchViewController {
      /// Segue identifier `ShowArticle`.
      static let showArticle: StoryboardSegueIdentifier<UIStoryboardSegue, SearchViewController, ArticleViewController> = StoryboardSegueIdentifier(identifier: "ShowArticle")
      
      /// Optionally returns a typed version of segue `ShowArticle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showArticle(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SearchViewController, ArticleViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.showArticle, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `About`.
    static let about = _R.storyboard.about()
    /// Storyboard `Article`.
    static let article = _R.storyboard.article()
    /// Storyboard `Category`.
    static let category = _R.storyboard.category()
    /// Storyboard `Categorys`.
    static let categorys = _R.storyboard.categorys()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    
    /// `UIStoryboard(name: "About", bundle: ...)`
    static func about(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.about)
    }
    
    /// `UIStoryboard(name: "Article", bundle: ...)`
    static func article(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.article)
    }
    
    /// `UIStoryboard(name: "Category", bundle: ...)`
    static func category(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.category)
    }
    
    /// `UIStoryboard(name: "Categorys", bundle: ...)`
    static func categorys(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.categorys)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.setting)
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "org.dianqk.SwiftGGQing") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try about.validate()
      try category.validate()
      try profile.validate()
      try categorys.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct about: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AboutViewController
      
      let bundle = _R.hostingBundle
      let name = "About"
      
      static func validate() throws {
        if UIImage(named: "icon_logo") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_logo' is used in storyboard 'About', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct article: StoryboardResourceWithInitialControllerType {
      typealias InitialController = ArticleViewController
      
      let bundle = _R.hostingBundle
      let name = "Article"
      
      private init() {}
    }
    
    struct category: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CategoryViewController
      
      let bundle = _R.hostingBundle
      let name = "Category"
      
      static func validate() throws {
        if UIImage(named: "img_category") == nil { throw ValidationError(description: "[R.swift] Image named 'img_category' is used in storyboard 'Category', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct categorys: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CategorysViewController
      
      let bundle = _R.hostingBundle
      let name = "Categorys"
      
      static func validate() throws {
        if UIImage(named: "icon_articles") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_articles' is used in storyboard 'Categorys', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "icon_logo") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UITabBarController
      
      let bundle = _R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Main"
      
      func homeViewController(_: Void) -> HomeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(homeViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "btn_search") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon_articles") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_articles' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_list") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_list' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon_home") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon_user") == nil { throw ValidationError(description: "[R.swift] Image named 'icon_user' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().homeViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
      }
      
      private init() {}
    }
    
    struct profile: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController
      
      let bundle = _R.hostingBundle
      let name = "Profile"
      
      static func validate() throws {
        if UIImage(named: "btn_go") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_go' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIImage(named: "btn_settings") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_settings' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIImage(named: "Avatar") == nil { throw ValidationError(description: "[R.swift] Image named 'Avatar' is used in storyboard 'Profile', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct search: StoryboardResourceWithInitialControllerType {
      typealias InitialController = SearchViewController
      
      let bundle = _R.hostingBundle
      let name = "Search"
      
      private init() {}
    }
    
    struct setting: StoryboardResourceWithInitialControllerType {
      typealias InitialController = SettingViewController
      
      let bundle = _R.hostingBundle
      let name = "Setting"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}